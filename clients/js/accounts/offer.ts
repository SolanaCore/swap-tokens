/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const OFFER_DISCRIMINATOR = new Uint8Array([
  215, 88, 60, 71, 170, 162, 73, 229,
]);

export function getOfferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(OFFER_DISCRIMINATOR);
}

export type Offer = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  proposer: Address;
  token0Amount: bigint;
  token1Amount: bigint;
  token0Mint: Address;
  token1Mint: Address;
  timestamp: bigint;
  isActive: boolean;
  isFulfilled: boolean;
  isEdited: boolean;
  offerId: bigint;
};

export type OfferArgs = {
  bump: number;
  proposer: Address;
  token0Amount: number | bigint;
  token1Amount: number | bigint;
  token0Mint: Address;
  token1Mint: Address;
  timestamp: number | bigint;
  isActive: boolean;
  isFulfilled: boolean;
  isEdited: boolean;
  offerId: number | bigint;
};

export function getOfferEncoder(): Encoder<OfferArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['proposer', getAddressEncoder()],
      ['token0Amount', getU64Encoder()],
      ['token1Amount', getU64Encoder()],
      ['token0Mint', getAddressEncoder()],
      ['token1Mint', getAddressEncoder()],
      ['timestamp', getI64Encoder()],
      ['isActive', getBooleanEncoder()],
      ['isFulfilled', getBooleanEncoder()],
      ['isEdited', getBooleanEncoder()],
      ['offerId', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: OFFER_DISCRIMINATOR })
  );
}

export function getOfferDecoder(): Decoder<Offer> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['proposer', getAddressDecoder()],
    ['token0Amount', getU64Decoder()],
    ['token1Amount', getU64Decoder()],
    ['token0Mint', getAddressDecoder()],
    ['token1Mint', getAddressDecoder()],
    ['timestamp', getI64Decoder()],
    ['isActive', getBooleanDecoder()],
    ['isFulfilled', getBooleanDecoder()],
    ['isEdited', getBooleanDecoder()],
    ['offerId', getU64Decoder()],
  ]);
}

export function getOfferCodec(): Codec<OfferArgs, Offer> {
  return combineCodec(getOfferEncoder(), getOfferDecoder());
}

export function decodeOffer<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Offer, TAddress>;
export function decodeOffer<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Offer, TAddress>;
export function decodeOffer<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Offer, TAddress> | MaybeAccount<Offer, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getOfferDecoder()
  );
}

export async function fetchOffer<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Offer, TAddress>> {
  const maybeAccount = await fetchMaybeOffer(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeOffer<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Offer, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeOffer(maybeAccount);
}

export async function fetchAllOffer(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Offer>[]> {
  const maybeAccounts = await fetchAllMaybeOffer(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeOffer(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Offer>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeOffer(maybeAccount));
}

export function getOfferSize(): number {
  return 140;
}
