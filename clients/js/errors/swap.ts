/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { SWAP_PROGRAM_ADDRESS } from '../programs';

/** TxAlreadyEditedOnce: Transaction has already edited once */
export const SWAP_ERROR__TX_ALREADY_EDITED_ONCE = 0x1770; // 6000
/** InvalidOwner: Invalid Owner */
export const SWAP_ERROR__INVALID_OWNER = 0x1771; // 6001
/** InvalidSwapAmount: Invalid swap amount */
export const SWAP_ERROR__INVALID_SWAP_AMOUNT = 0x1772; // 6002
/** InsufficientBalance: Insufficient funds for swap */
export const SWAP_ERROR__INSUFFICIENT_BALANCE = 0x1773; // 6003

export type SwapError =
  | typeof SWAP_ERROR__INSUFFICIENT_BALANCE
  | typeof SWAP_ERROR__INVALID_OWNER
  | typeof SWAP_ERROR__INVALID_SWAP_AMOUNT
  | typeof SWAP_ERROR__TX_ALREADY_EDITED_ONCE;

let swapErrorMessages: Record<SwapError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  swapErrorMessages = {
    [SWAP_ERROR__INSUFFICIENT_BALANCE]: `Insufficient funds for swap`,
    [SWAP_ERROR__INVALID_OWNER]: `Invalid Owner`,
    [SWAP_ERROR__INVALID_SWAP_AMOUNT]: `Invalid swap amount`,
    [SWAP_ERROR__TX_ALREADY_EDITED_ONCE]: `Transaction has already edited once`,
  };
}

export function getSwapErrorMessage(code: SwapError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (swapErrorMessages as Record<SwapError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isSwapError<TProgramErrorCode extends SwapError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    SWAP_PROGRAM_ADDRESS,
    code
  );
}
