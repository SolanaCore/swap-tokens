/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedAcceptOfferInstruction,
  type ParsedCancelOfferInstruction,
  type ParsedCreateOfferInstruction,
  type ParsedEditOfferInstruction,
} from '../instructions';

export const SWAP_PROGRAM_ADDRESS =
  'Swap3sqTyxNUHeUSNg5M6dmCmvsuMdRNdrqm7o2Khrt' as Address<'Swap3sqTyxNUHeUSNg5M6dmCmvsuMdRNdrqm7o2Khrt'>;

export enum SwapAccount {
  Offer,
}

export function identifySwapAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SwapAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([215, 88, 60, 71, 170, 162, 73, 229])
      ),
      0
    )
  ) {
    return SwapAccount.Offer;
  }
  throw new Error(
    'The provided account could not be identified as a swap account.'
  );
}

export enum SwapInstruction {
  AcceptOffer,
  CancelOffer,
  CreateOffer,
  EditOffer,
}

export function identifySwapInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SwapInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 82, 234, 131, 1, 18, 48, 2])
      ),
      0
    )
  ) {
    return SwapInstruction.AcceptOffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([92, 203, 223, 40, 92, 89, 53, 119])
      ),
      0
    )
  ) {
    return SwapInstruction.CancelOffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([237, 233, 192, 168, 248, 7, 249, 241])
      ),
      0
    )
  ) {
    return SwapInstruction.CreateOffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([49, 95, 219, 104, 73, 133, 159, 178])
      ),
      0
    )
  ) {
    return SwapInstruction.EditOffer;
  }
  throw new Error(
    'The provided instruction could not be identified as a swap instruction.'
  );
}

export type ParsedSwapInstruction<
  TProgram extends string = 'Swap3sqTyxNUHeUSNg5M6dmCmvsuMdRNdrqm7o2Khrt',
> =
  | ({
      instructionType: SwapInstruction.AcceptOffer;
    } & ParsedAcceptOfferInstruction<TProgram>)
  | ({
      instructionType: SwapInstruction.CancelOffer;
    } & ParsedCancelOfferInstruction<TProgram>)
  | ({
      instructionType: SwapInstruction.CreateOffer;
    } & ParsedCreateOfferInstruction<TProgram>)
  | ({
      instructionType: SwapInstruction.EditOffer;
    } & ParsedEditOfferInstruction<TProgram>);
