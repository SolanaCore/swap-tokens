/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { SWAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const EDIT_OFFER_DISCRIMINATOR = new Uint8Array([
  49, 95, 219, 104, 73, 133, 159, 178,
]);

export function getEditOfferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(EDIT_OFFER_DISCRIMINATOR);
}

export type EditOfferInstruction<
  TProgram extends string = typeof SWAP_PROGRAM_ADDRESS,
  TAccountProposer extends string | IAccountMeta<string> = string,
  TAccountNewToken0Mint extends string | IAccountMeta<string> = string,
  TAccountNewToken1Mint extends string | IAccountMeta<string> = string,
  TAccountOffer extends string | IAccountMeta<string> = string,
  TAccountOldVault0 extends string | IAccountMeta<string> = string,
  TAccountOldToken0 extends string | IAccountMeta<string> = string,
  TAccountNewToken0 extends string | IAccountMeta<string> = string,
  TAccountNewVault0 extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProposer extends string
        ? WritableSignerAccount<TAccountProposer> &
            IAccountSignerMeta<TAccountProposer>
        : TAccountProposer,
      TAccountNewToken0Mint extends string
        ? ReadonlyAccount<TAccountNewToken0Mint>
        : TAccountNewToken0Mint,
      TAccountNewToken1Mint extends string
        ? ReadonlyAccount<TAccountNewToken1Mint>
        : TAccountNewToken1Mint,
      TAccountOffer extends string
        ? WritableAccount<TAccountOffer>
        : TAccountOffer,
      TAccountOldVault0 extends string
        ? WritableAccount<TAccountOldVault0>
        : TAccountOldVault0,
      TAccountOldToken0 extends string
        ? WritableAccount<TAccountOldToken0>
        : TAccountOldToken0,
      TAccountNewToken0 extends string
        ? WritableSignerAccount<TAccountNewToken0> &
            IAccountSignerMeta<TAccountNewToken0>
        : TAccountNewToken0,
      TAccountNewVault0 extends string
        ? WritableSignerAccount<TAccountNewVault0> &
            IAccountSignerMeta<TAccountNewVault0>
        : TAccountNewVault0,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type EditOfferInstructionData = {
  discriminator: ReadonlyUint8Array;
  token0Amount: bigint;
  token1Amount: bigint;
};

export type EditOfferInstructionDataArgs = {
  token0Amount: number | bigint;
  token1Amount: number | bigint;
};

export function getEditOfferInstructionDataEncoder(): Encoder<EditOfferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['token0Amount', getU64Encoder()],
      ['token1Amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: EDIT_OFFER_DISCRIMINATOR })
  );
}

export function getEditOfferInstructionDataDecoder(): Decoder<EditOfferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['token0Amount', getU64Decoder()],
    ['token1Amount', getU64Decoder()],
  ]);
}

export function getEditOfferInstructionDataCodec(): Codec<
  EditOfferInstructionDataArgs,
  EditOfferInstructionData
> {
  return combineCodec(
    getEditOfferInstructionDataEncoder(),
    getEditOfferInstructionDataDecoder()
  );
}

export type EditOfferInput<
  TAccountProposer extends string = string,
  TAccountNewToken0Mint extends string = string,
  TAccountNewToken1Mint extends string = string,
  TAccountOffer extends string = string,
  TAccountOldVault0 extends string = string,
  TAccountOldToken0 extends string = string,
  TAccountNewToken0 extends string = string,
  TAccountNewVault0 extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  proposer: TransactionSigner<TAccountProposer>;
  newToken0Mint: Address<TAccountNewToken0Mint>;
  newToken1Mint: Address<TAccountNewToken1Mint>;
  offer: Address<TAccountOffer>;
  oldVault0: Address<TAccountOldVault0>;
  oldToken0: Address<TAccountOldToken0>;
  newToken0: TransactionSigner<TAccountNewToken0>;
  newVault0: TransactionSigner<TAccountNewVault0>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rent?: Address<TAccountRent>;
  token0Amount: EditOfferInstructionDataArgs['token0Amount'];
  token1Amount: EditOfferInstructionDataArgs['token1Amount'];
};

export function getEditOfferInstruction<
  TAccountProposer extends string,
  TAccountNewToken0Mint extends string,
  TAccountNewToken1Mint extends string,
  TAccountOffer extends string,
  TAccountOldVault0 extends string,
  TAccountOldToken0 extends string,
  TAccountNewToken0 extends string,
  TAccountNewVault0 extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof SWAP_PROGRAM_ADDRESS,
>(
  input: EditOfferInput<
    TAccountProposer,
    TAccountNewToken0Mint,
    TAccountNewToken1Mint,
    TAccountOffer,
    TAccountOldVault0,
    TAccountOldToken0,
    TAccountNewToken0,
    TAccountNewVault0,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): EditOfferInstruction<
  TProgramAddress,
  TAccountProposer,
  TAccountNewToken0Mint,
  TAccountNewToken1Mint,
  TAccountOffer,
  TAccountOldVault0,
  TAccountOldToken0,
  TAccountNewToken0,
  TAccountNewVault0,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposer: { value: input.proposer ?? null, isWritable: true },
    newToken0Mint: { value: input.newToken0Mint ?? null, isWritable: false },
    newToken1Mint: { value: input.newToken1Mint ?? null, isWritable: false },
    offer: { value: input.offer ?? null, isWritable: true },
    oldVault0: { value: input.oldVault0 ?? null, isWritable: true },
    oldToken0: { value: input.oldToken0 ?? null, isWritable: true },
    newToken0: { value: input.newToken0 ?? null, isWritable: true },
    newVault0: { value: input.newVault0 ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.proposer),
      getAccountMeta(accounts.newToken0Mint),
      getAccountMeta(accounts.newToken1Mint),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.oldVault0),
      getAccountMeta(accounts.oldToken0),
      getAccountMeta(accounts.newToken0),
      getAccountMeta(accounts.newVault0),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getEditOfferInstructionDataEncoder().encode(
      args as EditOfferInstructionDataArgs
    ),
  } as EditOfferInstruction<
    TProgramAddress,
    TAccountProposer,
    TAccountNewToken0Mint,
    TAccountNewToken1Mint,
    TAccountOffer,
    TAccountOldVault0,
    TAccountOldToken0,
    TAccountNewToken0,
    TAccountNewVault0,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedEditOfferInstruction<
  TProgram extends string = typeof SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    proposer: TAccountMetas[0];
    newToken0Mint: TAccountMetas[1];
    newToken1Mint: TAccountMetas[2];
    offer: TAccountMetas[3];
    oldVault0: TAccountMetas[4];
    oldToken0: TAccountMetas[5];
    newToken0: TAccountMetas[6];
    newVault0: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    rent: TAccountMetas[10];
  };
  data: EditOfferInstructionData;
};

export function parseEditOfferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedEditOfferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      proposer: getNextAccount(),
      newToken0Mint: getNextAccount(),
      newToken1Mint: getNextAccount(),
      offer: getNextAccount(),
      oldVault0: getNextAccount(),
      oldToken0: getNextAccount(),
      newToken0: getNextAccount(),
      newVault0: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getEditOfferInstructionDataDecoder().decode(instruction.data),
  };
}
