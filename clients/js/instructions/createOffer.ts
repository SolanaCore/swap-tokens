/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { SWAP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_OFFER_DISCRIMINATOR = new Uint8Array([
  237, 233, 192, 168, 248, 7, 249, 241,
]);

export function getCreateOfferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_OFFER_DISCRIMINATOR
  );
}

export type CreateOfferInstruction<
  TProgram extends string = typeof SWAP_PROGRAM_ADDRESS,
  TAccountProposer extends string | IAccountMeta<string> = string,
  TAccountOffer extends string | IAccountMeta<string> = string,
  TAccountToken0 extends string | IAccountMeta<string> = string,
  TAccountToken0Mint extends string | IAccountMeta<string> = string,
  TAccountToken1Mint extends string | IAccountMeta<string> = string,
  TAccountVault0 extends string | IAccountMeta<string> = string,
  TAccountVault1 extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProposer extends string
        ? WritableSignerAccount<TAccountProposer> &
            IAccountSignerMeta<TAccountProposer>
        : TAccountProposer,
      TAccountOffer extends string
        ? WritableAccount<TAccountOffer>
        : TAccountOffer,
      TAccountToken0 extends string
        ? WritableAccount<TAccountToken0>
        : TAccountToken0,
      TAccountToken0Mint extends string
        ? ReadonlyAccount<TAccountToken0Mint>
        : TAccountToken0Mint,
      TAccountToken1Mint extends string
        ? ReadonlyAccount<TAccountToken1Mint>
        : TAccountToken1Mint,
      TAccountVault0 extends string
        ? WritableSignerAccount<TAccountVault0> &
            IAccountSignerMeta<TAccountVault0>
        : TAccountVault0,
      TAccountVault1 extends string
        ? WritableSignerAccount<TAccountVault1> &
            IAccountSignerMeta<TAccountVault1>
        : TAccountVault1,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateOfferInstructionData = {
  discriminator: ReadonlyUint8Array;
  token0Amount: bigint;
  token1Amount: bigint;
  offerId: bigint;
};

export type CreateOfferInstructionDataArgs = {
  token0Amount: number | bigint;
  token1Amount: number | bigint;
  offerId: number | bigint;
};

export function getCreateOfferInstructionDataEncoder(): Encoder<CreateOfferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['token0Amount', getU64Encoder()],
      ['token1Amount', getU64Encoder()],
      ['offerId', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_OFFER_DISCRIMINATOR })
  );
}

export function getCreateOfferInstructionDataDecoder(): Decoder<CreateOfferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['token0Amount', getU64Decoder()],
    ['token1Amount', getU64Decoder()],
    ['offerId', getU64Decoder()],
  ]);
}

export function getCreateOfferInstructionDataCodec(): Codec<
  CreateOfferInstructionDataArgs,
  CreateOfferInstructionData
> {
  return combineCodec(
    getCreateOfferInstructionDataEncoder(),
    getCreateOfferInstructionDataDecoder()
  );
}

export type CreateOfferAsyncInput<
  TAccountProposer extends string = string,
  TAccountOffer extends string = string,
  TAccountToken0 extends string = string,
  TAccountToken0Mint extends string = string,
  TAccountToken1Mint extends string = string,
  TAccountVault0 extends string = string,
  TAccountVault1 extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  proposer: TransactionSigner<TAccountProposer>;
  offer?: Address<TAccountOffer>;
  token0: Address<TAccountToken0>;
  token0Mint: Address<TAccountToken0Mint>;
  token1Mint: Address<TAccountToken1Mint>;
  vault0: TransactionSigner<TAccountVault0>;
  vault1: TransactionSigner<TAccountVault1>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  token0Amount: CreateOfferInstructionDataArgs['token0Amount'];
  token1Amount: CreateOfferInstructionDataArgs['token1Amount'];
  offerId: CreateOfferInstructionDataArgs['offerId'];
};

export async function getCreateOfferInstructionAsync<
  TAccountProposer extends string,
  TAccountOffer extends string,
  TAccountToken0 extends string,
  TAccountToken0Mint extends string,
  TAccountToken1Mint extends string,
  TAccountVault0 extends string,
  TAccountVault1 extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof SWAP_PROGRAM_ADDRESS,
>(
  input: CreateOfferAsyncInput<
    TAccountProposer,
    TAccountOffer,
    TAccountToken0,
    TAccountToken0Mint,
    TAccountToken1Mint,
    TAccountVault0,
    TAccountVault1,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateOfferInstruction<
    TProgramAddress,
    TAccountProposer,
    TAccountOffer,
    TAccountToken0,
    TAccountToken0Mint,
    TAccountToken1Mint,
    TAccountVault0,
    TAccountVault1,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposer: { value: input.proposer ?? null, isWritable: true },
    offer: { value: input.offer ?? null, isWritable: true },
    token0: { value: input.token0 ?? null, isWritable: true },
    token0Mint: { value: input.token0Mint ?? null, isWritable: false },
    token1Mint: { value: input.token1Mint ?? null, isWritable: false },
    vault0: { value: input.vault0 ?? null, isWritable: true },
    vault1: { value: input.vault1 ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.offer.value) {
    accounts.offer.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([115, 119, 97, 112])),
        getAddressEncoder().encode(expectAddress(accounts.proposer.value)),
        getU64Encoder().encode(expectSome(args.offerId)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.proposer),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.token0),
      getAccountMeta(accounts.token0Mint),
      getAccountMeta(accounts.token1Mint),
      getAccountMeta(accounts.vault0),
      getAccountMeta(accounts.vault1),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getCreateOfferInstructionDataEncoder().encode(
      args as CreateOfferInstructionDataArgs
    ),
  } as CreateOfferInstruction<
    TProgramAddress,
    TAccountProposer,
    TAccountOffer,
    TAccountToken0,
    TAccountToken0Mint,
    TAccountToken1Mint,
    TAccountVault0,
    TAccountVault1,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type CreateOfferInput<
  TAccountProposer extends string = string,
  TAccountOffer extends string = string,
  TAccountToken0 extends string = string,
  TAccountToken0Mint extends string = string,
  TAccountToken1Mint extends string = string,
  TAccountVault0 extends string = string,
  TAccountVault1 extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  proposer: TransactionSigner<TAccountProposer>;
  offer: Address<TAccountOffer>;
  token0: Address<TAccountToken0>;
  token0Mint: Address<TAccountToken0Mint>;
  token1Mint: Address<TAccountToken1Mint>;
  vault0: TransactionSigner<TAccountVault0>;
  vault1: TransactionSigner<TAccountVault1>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  token0Amount: CreateOfferInstructionDataArgs['token0Amount'];
  token1Amount: CreateOfferInstructionDataArgs['token1Amount'];
  offerId: CreateOfferInstructionDataArgs['offerId'];
};

export function getCreateOfferInstruction<
  TAccountProposer extends string,
  TAccountOffer extends string,
  TAccountToken0 extends string,
  TAccountToken0Mint extends string,
  TAccountToken1Mint extends string,
  TAccountVault0 extends string,
  TAccountVault1 extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof SWAP_PROGRAM_ADDRESS,
>(
  input: CreateOfferInput<
    TAccountProposer,
    TAccountOffer,
    TAccountToken0,
    TAccountToken0Mint,
    TAccountToken1Mint,
    TAccountVault0,
    TAccountVault1,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateOfferInstruction<
  TProgramAddress,
  TAccountProposer,
  TAccountOffer,
  TAccountToken0,
  TAccountToken0Mint,
  TAccountToken1Mint,
  TAccountVault0,
  TAccountVault1,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposer: { value: input.proposer ?? null, isWritable: true },
    offer: { value: input.offer ?? null, isWritable: true },
    token0: { value: input.token0 ?? null, isWritable: true },
    token0Mint: { value: input.token0Mint ?? null, isWritable: false },
    token1Mint: { value: input.token1Mint ?? null, isWritable: false },
    vault0: { value: input.vault0 ?? null, isWritable: true },
    vault1: { value: input.vault1 ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.proposer),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.token0),
      getAccountMeta(accounts.token0Mint),
      getAccountMeta(accounts.token1Mint),
      getAccountMeta(accounts.vault0),
      getAccountMeta(accounts.vault1),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getCreateOfferInstructionDataEncoder().encode(
      args as CreateOfferInstructionDataArgs
    ),
  } as CreateOfferInstruction<
    TProgramAddress,
    TAccountProposer,
    TAccountOffer,
    TAccountToken0,
    TAccountToken0Mint,
    TAccountToken1Mint,
    TAccountVault0,
    TAccountVault1,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedCreateOfferInstruction<
  TProgram extends string = typeof SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    proposer: TAccountMetas[0];
    offer: TAccountMetas[1];
    token0: TAccountMetas[2];
    token0Mint: TAccountMetas[3];
    token1Mint: TAccountMetas[4];
    vault0: TAccountMetas[5];
    vault1: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
  };
  data: CreateOfferInstructionData;
};

export function parseCreateOfferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateOfferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      proposer: getNextAccount(),
      offer: getNextAccount(),
      token0: getNextAccount(),
      token0Mint: getNextAccount(),
      token1Mint: getNextAccount(),
      vault0: getNextAccount(),
      vault1: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getCreateOfferInstructionDataDecoder().decode(instruction.data),
  };
}
