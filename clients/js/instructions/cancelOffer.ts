/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from 'gill';
import { SWAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CANCEL_OFFER_DISCRIMINATOR = new Uint8Array([
  92, 203, 223, 40, 92, 89, 53, 119,
]);

export function getCancelOfferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CANCEL_OFFER_DISCRIMINATOR
  );
}

export type CancelOfferInstruction<
  TProgram extends string = typeof SWAP_PROGRAM_ADDRESS,
  TAccountProposer extends string | IAccountMeta<string> = string,
  TAccountOffer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProposer extends string
        ? ReadonlySignerAccount<TAccountProposer> &
            IAccountSignerMeta<TAccountProposer>
        : TAccountProposer,
      TAccountOffer extends string
        ? WritableAccount<TAccountOffer>
        : TAccountOffer,
      ...TRemainingAccounts,
    ]
  >;

export type CancelOfferInstructionData = { discriminator: ReadonlyUint8Array };

export type CancelOfferInstructionDataArgs = {};

export function getCancelOfferInstructionDataEncoder(): Encoder<CancelOfferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CANCEL_OFFER_DISCRIMINATOR })
  );
}

export function getCancelOfferInstructionDataDecoder(): Decoder<CancelOfferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCancelOfferInstructionDataCodec(): Codec<
  CancelOfferInstructionDataArgs,
  CancelOfferInstructionData
> {
  return combineCodec(
    getCancelOfferInstructionDataEncoder(),
    getCancelOfferInstructionDataDecoder()
  );
}

export type CancelOfferInput<
  TAccountProposer extends string = string,
  TAccountOffer extends string = string,
> = {
  proposer: TransactionSigner<TAccountProposer>;
  offer: Address<TAccountOffer>;
};

export function getCancelOfferInstruction<
  TAccountProposer extends string,
  TAccountOffer extends string,
  TProgramAddress extends Address = typeof SWAP_PROGRAM_ADDRESS,
>(
  input: CancelOfferInput<TAccountProposer, TAccountOffer>,
  config?: { programAddress?: TProgramAddress }
): CancelOfferInstruction<TProgramAddress, TAccountProposer, TAccountOffer> {
  // Program address.
  const programAddress = config?.programAddress ?? SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposer: { value: input.proposer ?? null, isWritable: false },
    offer: { value: input.offer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.proposer),
      getAccountMeta(accounts.offer),
    ],
    programAddress,
    data: getCancelOfferInstructionDataEncoder().encode({}),
  } as CancelOfferInstruction<TProgramAddress, TAccountProposer, TAccountOffer>;

  return instruction;
}

export type ParsedCancelOfferInstruction<
  TProgram extends string = typeof SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    proposer: TAccountMetas[0];
    offer: TAccountMetas[1];
  };
  data: CancelOfferInstructionData;
};

export function parseCancelOfferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCancelOfferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      proposer: getNextAccount(),
      offer: getNextAccount(),
    },
    data: getCancelOfferInstructionDataDecoder().decode(instruction.data),
  };
}
